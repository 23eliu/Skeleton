plugins {
    id "java"
    id "eclipse"
    id "idea"
    id "edu.wpi.first.GradleRIO" version "2019.0.0-alpha-3"
}


allprojects {
    repositories {
        maven { url "https://jitpack.io" }
        mavenCentral()
    }
}

def ROBOT_MAIN_CLASS = "frc.team852.Robot"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", edu.wpi.first.gradlerio.frc.RoboRIO) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = getTeamOrDefault(852)
        }
    }
    artifacts {
        artifact('frcJava', edu.wpi.first.gradlerio.frc.FRCJavaArtifact) {
            targets << 'roborio'
            // Debug can be overridden by command line, for use with VSCode
            debug = getDebugOrDefault(false)
            debugPort = 8348
        }
    }
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    compile wpilib()
    compile ctre()
    //compile pathfinder()
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'com.google.code.gson:gson:2.8.5'

}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

wrapper {
    gradleVersion = '4.9'
}
